{"mappings":"AAAA,SAAAA,kBAAAC,EAAAC,I,m8BAAA,IAM2CC,OAAQC,gBAAiBC,UAN9DC,QAAUC,SAASC,cAAc,YACjCC,SAAWF,SAASC,cAAc,aAClCE,eAAiBD,SAASD,cAAc,SAASG,YACjDC,UAAYL,SAASM,iBAAiB,cACtCC,kBAAqBC,mBAAGN,SAASO,UAEnCC,YAAa,EAAOC,YAAa,EAGjCC,YAAcC,KAAKC,MAAMZ,SAASE,YAAcD,gBAGpDI,kBAAkBQ,OAAOH,aAAaI,UAAUC,SAAQ,SAAAC,GACpDhB,SAASiB,mBAAmB,aAAcD,EAAKE,U,IAInDb,kBAAkBQ,MAAM,EAAGH,aAAaK,SAAQ,SAAAC,GAC5ChB,SAASiB,mBAAmB,YAAaD,EAAKE,U,IAIlDlB,SAASmB,UAAUC,IAAI,iBACvBpB,SAASqB,WAAarB,SAASE,YAC/BF,SAASmB,UAAUG,OAAO,iBAG1BnB,UAAUY,SAAQ,SAAAQ,GACdA,EAAIC,iBAAiB,SAAS,WAC1BxB,SAASqB,YAAwB,QAAVE,EAAIE,IAAgBxB,eAAiBA,c,OAIpE,IAAMyB,UAAY,SAACC,GACfnB,YAAa,EACbR,SAASmB,UAAUC,IAAI,YAEvB1B,OAASiC,EAAEC,MACXjC,gBAAkBK,SAASqB,U,EAGzBQ,SAAW,SAACF,GACVnB,aAEJR,SAASqB,WAAa1B,iBAAmBgC,EAAEC,MAAQlC,Q,EAGjDoC,SAAW,WACbtB,YAAa,EACbR,SAASmB,UAAUG,OAAO,W,EAGxBS,eAAiB,WAEQ,IAAxB/B,SAASqB,YACRrB,SAASmB,UAAUC,IAAI,iBACvBpB,SAASqB,WAAarB,SAASgC,YAAe,EAAIhC,SAASE,YAC3DF,SAASmB,UAAUG,OAAO,kBAGtBX,KAAKsB,KAAKjC,SAASqB,cAAgBrB,SAASgC,YAAchC,SAASE,cACvEF,SAASmB,UAAUC,IAAI,iBACvBpB,SAASqB,WAAarB,SAASE,YAC/BF,SAASmB,UAAUG,OAAO,kBAI9BY,aAAatC,WACTC,QAAQsC,QAAQ,WAAWC,U,EAG7BA,SAAW,WACVC,OAAOC,WAAa,MAAQ7B,aAE/Bb,UAAY2C,YAAW,W,OAAMvC,SAASqB,YAAcpB,c,GAAgB,M,EAExEmC,WAEApC,SAASwB,iBAAiB,YAAaE,WACvC1B,SAASwB,iBAAiB,YAAaK,UACvC/B,SAAS0B,iBAAiB,UAAWM,UACrC9B,SAASwB,iBAAiB,SAAUO,gBACpClC,QAAQ2B,iBAAiB,cAAc,W,OAAMU,aAAatC,U,IAC1DC,QAAQ2B,iBAAiB,aAAcY","sources":["src/javascript/section-explore.js"],"sourcesContent":["const wrapper = document.querySelector(\".wrapper\");\nconst carousel = document.querySelector(\".carousel\");\nconst firstCardWidth = carousel.querySelector(\".card\").offsetWidth;\nconst arrowBtns = document.querySelectorAll(\".wrapper i\");\nconst carouselChildrens = [...carousel.children];\n\nlet isDragging = false, isAutoPlay = true, startX, startScrollLeft, timeoutId;\n\n// Get the number of cards that can fit in the carousel at once\nlet cardPerView = Math.round(carousel.offsetWidth / firstCardWidth);\n\n// Insert copies of the last few cards to beginning of carousel for infinite scrolling\ncarouselChildrens.slice(-cardPerView).reverse().forEach(card => {\n    carousel.insertAdjacentHTML(\"afterbegin\", card.outerHTML);\n});\n\n// Insert copies of the first few cards to end of carousel for infinite scrolling\ncarouselChildrens.slice(0, cardPerView).forEach(card => {\n    carousel.insertAdjacentHTML(\"beforeend\", card.outerHTML);\n});\n\n// Scroll the carousel at appropriate postition to hide first few duplicate cards on Firefox\ncarousel.classList.add(\"no-transition\");\ncarousel.scrollLeft = carousel.offsetWidth;\ncarousel.classList.remove(\"no-transition\");\n\n// Add event listeners for the arrow buttons to scroll the carousel left and right\narrowBtns.forEach(btn => {\n    btn.addEventListener(\"click\", () => {\n        carousel.scrollLeft += btn.id == \"left\" ? -firstCardWidth : firstCardWidth;\n    });\n});\n\nconst dragStart = (e) => {\n    isDragging = true;\n    carousel.classList.add(\"dragging\");\n    // Records the initial cursor and scroll position of the carousel\n    startX = e.pageX;\n    startScrollLeft = carousel.scrollLeft;\n}\n\nconst dragging = (e) => {\n    if(!isDragging) return; // if isDragging is false return from here\n    // Updates the scroll position of the carousel based on the cursor movement\n    carousel.scrollLeft = startScrollLeft - (e.pageX - startX);\n}\n\nconst dragStop = () => {\n    isDragging = false;\n    carousel.classList.remove(\"dragging\");\n}\n\nconst infiniteScroll = () => {\n    // If the carousel is at the beginning, scroll to the end\n    if(carousel.scrollLeft === 0) {\n        carousel.classList.add(\"no-transition\");\n        carousel.scrollLeft = carousel.scrollWidth - (2 * carousel.offsetWidth);\n        carousel.classList.remove(\"no-transition\");\n    }\n    // If the carousel is at the end, scroll to the beginning\n    else if(Math.ceil(carousel.scrollLeft) === carousel.scrollWidth - carousel.offsetWidth) {\n        carousel.classList.add(\"no-transition\");\n        carousel.scrollLeft = carousel.offsetWidth;\n        carousel.classList.remove(\"no-transition\");\n    }\n\n    // Clear existing timeout & start autoplay if mouse is not hovering over carousel\n    clearTimeout(timeoutId);\n    if(!wrapper.matches(\":hover\")) autoPlay();\n}\n\nconst autoPlay = () => {\n    if(window.innerWidth < 800 || !isAutoPlay) return; // Return if window is smaller than 800 or isAutoPlay is false\n    // Autoplay the carousel after every 2500 ms\n    timeoutId = setTimeout(() => carousel.scrollLeft += firstCardWidth, 2500);\n}\nautoPlay();\n\ncarousel.addEventListener(\"mousedown\", dragStart);\ncarousel.addEventListener(\"mousemove\", dragging);\ndocument.addEventListener(\"mouseup\", dragStop);\ncarousel.addEventListener(\"scroll\", infiniteScroll);\nwrapper.addEventListener(\"mouseenter\", () => clearTimeout(timeoutId));\nwrapper.addEventListener(\"mouseleave\", autoPlay);"],"names":["_arrayLikeToArray","arr","len","startX","startScrollLeft","timeoutId","wrapper","document","querySelector","carousel","firstCardWidth","offsetWidth","arrowBtns","querySelectorAll","carouselChildrens","_toConsumableArray","children","isDragging","isAutoPlay","cardPerView","Math","round","slice","reverse","forEach","card","insertAdjacentHTML","outerHTML","classList","add","scrollLeft","remove","btn","addEventListener","id","dragStart","e","pageX","dragging","dragStop","infiniteScroll","scrollWidth","ceil","clearTimeout","matches","autoPlay","window","innerWidth","setTimeout"],"version":3,"file":"index.731e3149.js.map"}